# ===================================================================================
#  Change-Guard - Local Development Environment Runner for Windows PowerShell
#  (Standard User Version - No Administrator Rights Required)
# ===================================================================================
#
#  Instructions:
#  1. Open a standard PowerShell terminal (in VS Code or standalone).
#  2. Navigate to the root of the 'change-guard' project directory.
#  3. If this is your first time, run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
#  4. Execute the script by typing: .\run-windows.ps1
#
# ===================================================================================

# // --- BEGIN USER CONFIGURATION --- //

# --- Google Cloud Project ---
$GCP_PROJECT_ID = "noble-cocoa-471417-k3"
$GCP_REGION = "asia-south1" # e.g., us-central1

# --- Firebase Web App Configuration ---
# **IMPORTANT**: Copy the entire firebaseConfig object from your Firebase project settings.
$FirebaseConfig = @"
const firebaseConfig = {
    apiKey: "AIzaSyANj1HttASrnt7MgTtYbJ6X6Vj-cUSnGsY",
    authDomain: "noble-cocoa-471417-k3.firebaseapp.com",
    projectId: "noble-cocoa-471417-k3",
    storageBucket: "noble-cocoa-471417-k3.appspot.com",
    messagingSenderId: "834130943216",
    appId: "1:834130943216:web:4768a80ecd83562de2f635"
};
"@

# // --- END USER CONFIGURATION --- //


# ===================================================================================
#  Script Logic (No need to edit below this line)
# ===================================================================================

# --- Helper function for logging ---
function Write-Log {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host "[SETUP] $Message" -ForegroundColor $Color
}

Write-Log "Starting setup process in standard user mode..."

# --- Backend Setup ---
$backendFunctions = @("orchestrator", "java_parser", "gemini_augmenter")

foreach ($func in $backendFunctions) {
    $funcPath = ".\functions\$func"
    Write-Log "Setting up backend function: '$func'..." -Color Yellow

    Push-Location $funcPath

    if (-not (Test-Path -Path ".\venv")) {
        Write-Log "Creating Python virtual environment..."
        python3 -m venv venv
    }

    Write-Log "Installing Python dependencies from requirements.txt..."
    # Activate and install in a single command block
    cmd /c "venv\Scripts\activate.bat && pip install -r requirements.txt"

    Pop-Location
    Write-Log "Setup for '$func' complete." -Color Green
}


# --- Frontend Setup ---
Write-Log "Setting up frontend application..." -Color Yellow
Push-Location ".\frontend"

Write-Log "Installing npm dependencies (this may take a moment)..."
npm install
npm install -D @tailwindcss/typography # Ensure missing dependency is present

Write-Log "Generating firebase.js configuration file..."
$firebaseJSContent = @"
// This file is auto-generated by the run-windows.ps1 script
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

$FirebaseConfig

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

export { db };
"@
# Corrected typo in storageBucket from previous user input
$firebaseJSContent = $firebaseJSContent.Replace(".firebasestorage.app", ".appspot.com")
Set-Content -Path ".\src\firebase.js" -Value $firebaseJSContent -Encoding UTF8
Write-Log "firebase.js created successfully." -Color Green

Pop-Location


# --- Launch All Services in Separate Windows ---
Write-Log "Launching all services in new terminal windows..." -Color Cyan

$orchestratorCommand = "cd .\functions\orchestrator; .\venv\Scripts\Activate.ps1; `$env:PARSER_FUNCTION_URL='http://localhost:8082'; `$env:GEMINI_FUNCTION_URL='http://localhost:8083'; functions-framework --target=handler --port=8081; Read-Host 'Press Enter to close this window'"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $orchestratorCommand

$parserCommand = "cd .\functions\java_parser; .\venv\Scripts\Activate.ps1; functions-framework --target=handler --port=8082; Read-Host 'Press Enter to close this window'"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $parserCommand

$geminiCommand = "cd .\functions\gemini_augmenter; .\venv\Scripts\Activate.ps1; `$env:GCP_PROJECT='$GCP_PROJECT_ID'; `$env:GCP_REGION='$GCP_REGION'; functions-framework --target=handler --port=8083; Read-Host 'Press Enter to close this window'"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $geminiCommand

$frontendCommand = "cd .\frontend; npm start"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $frontendCommand


# --- Final Summary ---
Write-Log "================================================================" -Color Green
Write-Log "            LOCAL ENVIRONMENT LAUNCHED SUCCESSFULLY" -Color Green
Write-Log "================================================================" -Color Green
Write-Log "Four new terminal windows have been opened for each service."
Write-Log "  - Orchestrator API: http://localhost:8081"
Write-Log "  - Java Parser API:  http://localhost:8082"
Write-Log "  - Gemini API:       http://localhost:8083"
Write-Log "  - Frontend App:     http://localhost:3000 (Check your browser)"
Write-Log ""
Write-Log "To stop the environment, simply close the four new windows." -Color Yellow
Write-Log "================================================================" -Color Green

